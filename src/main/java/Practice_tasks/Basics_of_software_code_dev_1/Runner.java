package Practice_tasks.Basics_of_software_code_dev_1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class Runner {
    public static void main(String[] args) {
        outputAllDivisors(new Scanner(System.in));
    }
    /*–õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º—ã*/


    /*1. –ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: z = ( (a ‚Äì 3 ) * b / 2) + c.*/
    static int findFunction(int a, int b, int c) {
        return ((a - 3) * b / 2) + c;
    }


    /*2. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
(ùëè + ‚àöùëè^2 + 4ùëéùëê/2ùëé) ‚àí ùëé^3*ùëê + ùëè^‚àí2*  **/
    static double evaluateExpressionValues1(double a, double b, double c) {
        return ((b + Math.sqrt(Math.pow(b, 2) + 4 * a * c)) / (2 * a)) - (Math.pow(a, 3) * c + Math.pow(b, -2));
    }

    /*3. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
((ùë†ùëñùëõ ùë• + ùëêùëúùë† ùë¶ / ùëêùëúùë† ùë• ‚àí ùë†ùëñùëõ ùë¶)tg xy); */
    static double evaluateExpressionValues2(double x, double y) {
        return ((Math.sin(x) + Math.cos(y)) / (Math.cos(x) - Math.sin(y))) * (Math.tan(x * y));
    }


    /*4. –î–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ R –≤–∏–¥–∞ nnn.ddd (—Ç—Ä–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–∞ –≤ –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç—è—Ö). –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
–¥—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞.*/
    static double swapExpression(double x) {
        double y = 0.0;
        double n = (int) x;
        return y = (x * 1000) % 1000 + (int) x / 1000.0;

    }


    /*5. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¢, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –í—ã–≤–µ—Å—Ç–∏
–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö –∏ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–µ:
–ù–ù—á –ú–ú–º–∏–Ω SSc.*/
    static int findFunction(int sec) {


        return sec * 60;


    }

    /*6. –î–ª—è –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç true, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ö, —É)
    –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏ false ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ: */
    static boolean thePointBelongsTo(int x, int y) {
        return x <= 4 && x >= -4 && y <= 4 && y >= -3;
    }



    /*–í–µ—Ç–≤–ª–µ–Ω–∏—è*/


    /*1. –î–∞–Ω—ã –¥–≤–∞ —É–≥–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ—Ç –ª–∏
     –æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º.*/
    static boolean isTriangle(double d1, double d2) {
        double x = d1 + d2;
        double thirdCornerOfTheTriangle = 180 - x;
        return thirdCornerOfTheTriangle == 90 ? true : false;

    }


    /*2. –ù–∞–π—Ç–∏ max{min(a, b), min(c, d)}.*/
    static String maxAndMinNumbers(int a, int b, int c, int d) {
        int ab = Math.min(a, b);
        int cd = Math.min(c, d);
        return String.valueOf(ab) + " =a&b," + String.valueOf(cd) + " =c&d";
    }


    /*3. –î–∞–Ω—ã —Ç—Ä–∏ —Ç–æ—á–∫–∏ –ê(—Ö1,—É1), –í(—Ö2,—É2) –∏ –°(—Ö3,—É3). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±—É–¥—É—Ç –ª–∏ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π. */
    static boolean isPointLiesOnTheLine(int x1, int x2, int x3, int y1, int y2, int y3) {
        return (x1 - y1) * (x2 - y2) * (x3 - y3) == 0 ? true : false;
    }


    /*4. –ó–∞–¥–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ê, –í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã —Ö, —É, z –∫–∏—Ä–ø–∏—á–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–π–¥–µ—Ç –ª–∏ –∫–∏—Ä–ø–∏—á —á–µ—Ä–µ–∑
    –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ.*/
    static boolean isWillPassTheBrickThroughTheHole(int A, int B, int x, int y, int z) {
        return (x <= A && y <= B || y <= A && x <= B ||
                x <= A && z <= B || z <= A && x <= B ||
                z <= A && y <= B || y <= A && z <= B);
    }


    /*–í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:  F(x)= x^2-3x+9, if x<=3; 1/x^3+6, if x>3.  */
    static double calculateTheValueOfAFunction(double x) {
        double firstResult = Math.pow(x, 2) - 3 * x + 9;
        double secondResult = 1 / Math.pow(x, 3) + 6;
        return x <= 3 ? firstResult : secondResult;
    }


    /*–¶–∏–∫–ª—ã*/


    /*1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª—é–±–æ–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ê –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—É–º–º–∏—Ä—É–µ—Ç
–≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–∞*/
    static int sumNumbers(int number) {
        int result = 0;
        if (number <= 0) {
            return -1;
        } else {
            for (int i = 0; i <= number; i++) {
                result += i;
            }
        }
        return result;
    }


    /*2. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [–∞,b] c —à–∞–≥–æ–º h:  y = x, x>2; -x,x <=2 */
    static int calculateTheValuesOfAFunctionOnASegment(int x) {
        int h = 0;
        if (x > 2) {
        }

        return 0;
    }

    /*3. –ù–∞–π—Ç–∏ —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç–∞ —á–∏—Å–µ–ª.*/
    static int sumOfSquaresOfNumbers() {
        int sum = 0;
        int upperBound = 100;
        for (int i = 0; i <= upperBound; i++) {
            sum += Math.pow(i, 2);
        }
        return sum;
    }

    /*4. –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö—Å–æ—Ç —á–∏—Å–µ–ª.*/
    static BigInteger compositionSumOfSquaresOfNumbers() {
        BigInteger number = BigInteger.valueOf(1);
        for (int i = 2; i <= 200; i++) {
            number = number.multiply(BigInteger.valueOf((long) i * i));
        }
        return number;
    }


    /*5. –î–∞–Ω—ã —á–∏—Å–ª–æ–≤–æ–π —Ä—è–¥ –∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –µ. –ù–∞–π—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —á–ª–µ–Ω–æ–≤ —Ä—è–¥–∞, –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω
    –∑–∞–¥–∞–Ω–Ω–æ–º—É –µ. –û–±—â–∏–π —á–ª–µ–Ω —Ä—è–¥–∞ –∏–º–µ–µ—Ç –≤–∏–¥: a n = 1/2^n+1/3^n */


    /*6. –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –∏—Ö —á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.*/
    static void symbolsAndNumbers() {
        for (long i = 32; i <= 65536; i++) {
            System.out.printf("%d %s\n%n", i, (char) i);
        }
    }

    /*7. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç m –¥–æ n –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–µ–ª–∏—Ç–µ–ª–∏, –∫—Ä–æ–º–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞.
    m –∏ n –≤–≤–æ–¥—è—Ç—Å—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.*/

    static void outputAllDivisors(Scanner scanner) {
        int number = scanner.nextInt();

        for (int i = 2; i <= number; i++) {
            for (int j = 2; j <= i; j++) {
                if (number % j == 0) {
                    System.out.print(j + " ");
                    number = number / j;
                }

            }
        }


    }




    /*8. –î–∞–Ω—ã –¥–≤–∞ —á–∏—Å–ª–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã, –≤—Ö–æ–¥—è—â–∏–µ –≤ –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–∫ –∏ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞.*/


}
